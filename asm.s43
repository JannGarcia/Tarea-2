#include "msp430.h"                                                             ; #define controlled include file

        NAME    main                                                            ; module name

        PUBLIC  main                                                            ; make the main label vissible
                                                                                ; outside this module
        ORG     0FFFEh
        DC16    init                                                            ; set reset vector to 'init' label

        ORG     0x1C00                                                          ; RAM starting location
                                                                                ; Always define it when working with arrays
                                                                                ; or saving a variable to RAM directly

;============================= NOTES ===========================================
; * Everything commented with // is debug code.
;===============================================================================

;============================= TODOs ===========================================
; 3) Conversion
; 4) Handle >= 64 case
; 5) Display conversion
; 6) Documentation
                                        

;============================= ARRAY DEFINITIONS/SETUP =========================
; Arrays need to be defined BEFORE "init"

; Input Buttons
S1      db 00000100B 
S2      db 00000010B

;Letters and Symbols
;            A     B     C     D     E     F     G     H     I     J     K     L     M     N     O     P     Q     R     S     T     U     V     W     X     Y     Z   NONE    -     >     ?
;            0     1     2     3     4     5     6     7     8     9     10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25   26    27    28    29
CharH   db 0xEF, 0xF1, 0x9C, 0xF0, 0x9F, 0x8E, 0xBD, 0x6F, 0x00, 0x78, 0x00, 0x1C, 0x6C, 0x6C, 0xFC, 0xCF, 0xFC, 0xCF, 0xB7, 0x80, 0x7C, 0x0C, 0x6C, 0x00, 0x00, 0x90, 0x00, 0x03, 0x00, 0xC5
CharL   db 0x00, 0x50, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x72, 0x00, 0xB0, 0x82, 0x00, 0x00, 0x02, 0x02, 0x00, 0x50, 0x00, 0x28, 0x0A, 0xAA, 0xB0, 0x28, 0x00, 0x00, 0x88, 0x10

; Digits        0     1     2     3     4      5      6      7      8     9
digitH  DB      0xFC, 0x60, 0xDB, 0xF3, 0x67,  0xB7,  0xBF,  0xE0,  0xFF, 0xE7
digitL  DB      0x00, 0x00, 0x00, 0x00, 0x00,  0x00,  0x00,  0x00,  0x00, 0x00

;               N       Y       
yesNoH  DB      0x6C, 0x00
yesNoL  DB      0x82, 0xB0 

;               +    -
posOrNegH DB    0x3, 0x3   
posOrNegL DB    0x50, 0x0

; Name Indices  -- IN 
names0  DB      9, 21, 8, 17
names1  DB      0, 0, 18, 8
names2  DB      13, 13, 0, 2
names3  DB      13, 3, 1, 0
names4  DB      26, 8, 4, 17
names5  DB      26, 4, 11, 3

; Place Value Array
wholeNumDecimal DW 0, 1, 1000, 100, 10, 1

; User input. MSB -> LSB
inputNumber DW  0, 0, 0, 0, 0, 0

; Currently Unused
; signQuest db 18, 8, 6, 13, 29           ;Signed Question
; dtbQuest db 3, 27, 28, 1, 29            ;dec to bin question
; digitDis db 3, 6, 19, 18, 29            ;Display DGTS?
; bitsDis db 1, 8, 19, 18, 29             ;Display BITS?
; errorDis db 4, 17, 17, 14, 17, 26       ; Display ERROR


;===============================================================================

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack


main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer


UnlockGPIO:                             ; Disable de GPIO power-on default
        BIC     #LOCKLPM5,&PM5CTL0        ; high-impedance mode to activade
                                        ; previously configured port settings

setupDisplayAndPorts:
        ; Manage Ports 
        ; Port 1
        MOV.b   #11111001B, &P1DIR        ; set P1.1/2 to input (input = 0)
        MOV.b   #00000110B, &P1REN        ; Activate P1.1/2 pull-up/down resistors
        BIS.b   #00000110B, &P1OUT        ; set P1.1/2 pull down resistor
        BIC.b   #BIT0,&P1OUT              ; set P1.0 LED off 


        // Port 9 (DEBUG -- Only for LED)
        BIS.b   #0xFF,&P9DIR              ; Set all P9 pins for output
        BIC.b   #0x80,&P9OUT              ; set P9.7 LED off


        ; Enable LCD segments: 0-21, 26-43
        MOV     #0xFFFF, &LCDCPCTL0     ; 1111111111111111
        MOV     #0xFC3F, &LCDCPCTL1     ; 1111110000111111, Q: why the 0's? Why ignore 22-25?
        MOV     #0x0FFF, &LCDCPCTL2     ; 1111111111111111
          
        ; Initialize LCD 
        MOV     #0x041e,&LCDCCTL0       ; sets display with hardware specs needed
        MOV     #0x0208, &LCDCVCTL      ; enable voltage for display
        MOV     #0x8000, &LCDCCPCTL     ; enable clock synchronization
        MOV     #2, &LCDCMEMCTL         ; clear LCD memory (resets screen)
        BIS     #1, &LCDCCTL0            ; turn the LCD on



; Everything under here will loop each time the program finishes
mainLoop:
        CALL    #reset                  ; Reset all needed registers/values
        CALL    #startProgram
        JMP     mainLoop
        
        CALL    #endProgram             ; Never runs, as mainLoop goes on forever


;===========================Clear Input Number Subroutine =================
; Author: Jann C. Garcia
; Date: November 3, 2022
; Description: Resets inputNumber to 0
; Pre-Conditions: None
; Post-Conditions: inputNumber is reset to 0
; Side Effects: None

clearInputNumber:
        PUSH.b    R4                      ; Store R4
        MOV     #0, R4

clearLoop:
        MOV     #0, inputNumber(R4)
        INCD    R4                      ; R4 += 2
        CMP     #12, R4                 
        JL      clearLoop
        POP.b     R4
        
        RET
;===============================================================================

;================================== RESET SUBROUTINE ===========================
; Author: Jann C. Garcia
; Date: October 31, 2022
; Description: Perform "Housekeeping" -- where we set every register/value to a default value
; Pre-Conditions: None
; Post-Conditions: R4 ->R10 are cleared, inputNumber is cleared
; Side Effects: None

reset:
        MOV     #0, R4                  ; R4 = Current Page/State
                                        ;       0 = Title       <-- start
                                        ;       1 = Name Loop
                                        ;       2 = Menu -- Question 1 (Sign?)
                                        ;       3 = Menu -- Question 2 (D --> B)
                                        ;       4 = Menu -- Question 3.a (Digs?)
                                        ;       5 = Menu -- Question 3.b (Bits?)
                                        ;       6 = Input Number Screen
                                        ;       7 = Error
                                        ;       8 = Conversion State
                                                
                                        ;       ...

        MOV     #0, R5                  ; R5 = Current Name
                                        ;       * 0 = Name 1
                                        ;       * 1 = Name 2
                                        ;       * 2 = Name 3
                                        ;       * 3 = Name 4

        MOV     #1, R6                  ; R6 = Signed/Unsigned boolean (1 = Y, 0 = N)
        MOV     #1, R7                  ; R7 = Dec -> Bin boolean / delay register (1 = Y, 0 = N)
        MOV     #0, R8                  ; R8 = # of integer bits [0-6 binary, 1-2 decimal]
                                        ; For decimal: 0 = 1 digit, 1 = 2 digits

        MOV     #0, R9                  ; R9 = P1 Value (S1 = Bit 1, S2 = Bit 2)

        MOV     #0, R10                 ; R10 = InputNumber Index

        MOV     #0, R11                 ; R11 = User Input Fractional Part

        MOV     #0, R12                 ; R12 = User Input Whole Part

        MOV     #2, &LCDCMEMCTL         ; clear LCD memory (resets screen)
    
        CALL    #clearInputNumber

        RET                              ; Jump back to "main"
        
;==========================================================================

;================================== START PROGRAM SUBROUTINE ==============
; Author: Jann C. Garcia
; Date: October 31, 2022
; Description: Loops the program until a final state is reached.
; Pre-Conditions: None
; Post-Conditions: None
; Side Effects: None
        
startProgram:
        
        CALL    #checkButtonInput
        CALL    #displayCurrentPage
        
        
        ; Check to determine if we need to continue looping
        CMP     #9, R4
        JL      startProgram
        
        RET                             ; Jump back to "main"


;==========================================================================

;=========================== CHECK BUTTON SUBROUTINE ======================
; Author: Jann C. Garcia
; Date: October 31, 2022
; Description: Verifies S1 or S2 was pressed and calls appropiate subroutines to take action.
; Pre-Conditions: None
; Post-Conditions: None
; Side Effects: None

checkButtonInput:
        ; Check if S1 was pressed
        ; If S1 was pressed, do an action based on the current page

        MOV.b   &P1IN, R9               ; Get button state from P1 
        AND.b   #00000110B, R9          ; Apply bit mask to value
        CMP.b   S1, R9          ; Check if S1 was pressed (sets to 0 when pressed)
        
        ; Skip to checking S2
        JNE     checkS2                 ; S1 wasn't pressed, check S2
        
        ; Call a delay, in case it was a false alarm
        CALL    #delay
        
        ; Check once again. If it's true, it should be correct
        MOV.b   &P1IN, R9               ; Get button state from P1 
        AND.b   #00000110B, R9          ; Apply bit mask to value

        ; Check if S1 was unpressed (sets to 0 when pressed)
        ; This is to prevent holding the button
        CMP.b   S1, R9          

        JNE     jumpToPerformActionForS1
        JMP     endButtonCheck
        
checkS2:           
        ; Check if S2 was pressed
        ; If S2 was pressed, do an action based on the current page

        MOV.b   &P1IN, R9               ; Get button state from P1 
        AND.b   #00000110B, R9          ; Apply bit mask to value
        CMP.b   S2, R9          ; Check if S2 was pressed (sets to 0 when pressed)
        
        JNE     endButtonCheck          ; S2 wasn't pressed, end button check
        
        ; Call a delay, in case it was a false alarm
        CALL    #delay
        
        
        ; Check once again. If it's true, it should be correct
        MOV.b   &P1IN, R9               ; Get button state from P1 
        AND.b   #00000110B, R9          ; Apply bit mask to value

        ; Check if S2 was unpressed (sets to 0 when pressed)
        ; This is to prevent holding the button
        CMP.b   S2, R9         
        JNE     jumpToPerformActionForS2
        JMP     endButtonCheck
                
jumpToPerformActionForS1:
        CALL    #performActionForS1
        JMP     endButtonCheck
        
jumpToPerformActionForS2:
        CALL    #performActionForS2
        
endButtonCheck:
        RET                             ; Return back to "startProgram"
        
;===============================================================================


;=============================== S1 BUTTON ACTION ==============================
; Author: Jann C. Garcia
; Date: October 31, 2022
; Description: Handles actions for when S1 is pressed
; Pre-Conditions: None
; Post-Conditions: None
; Side Effects: None

performActionForS1:
        // DEBUG: Turn P1.0 ON and P9.7 OFF
        BIS.b   #BIT0, &P1OUT
        BIC.b   #0x80, &P9OUT
        
        ; We need to check what page we are on!
        ; Depending on the page, we need to perform different actions:
        CMP     #0, R4
        JEQ     performS1ActionForPage0 ; Title Page
        
        CMP     #1, R4
        JEQ     performS1ActionForPage1 ; Name Loop Page
        
        CMP     #2, R4
        JEQ     performS1ActionForPage2 ; Signed or Unsigned?
        
        CMP     #3, R4
        JEQ     performS1ActionForPage3 ; Dec --> Bin?
        
        CMP     #4, R4
        JEQ     performS1ActionForPage4 ; Digits? 
        
        CMP     #5, R4
        JEQ     performS1ActionForPage5 ; Bits?
        
        CMP     #6, R4
        JEQ     performS1ActionForPage6 ; Number Input
        
        CMP     #7, R4
        JEQ     performS1ActionForPage7 ; Error
        
        CMP     #8, R4
        JEQ     performS1ActionForPage8 ; Conversion State
       
        
performS1ActionForPage0:        ; Title
        ; Move to Name Loop
        MOV     #1, R4
        JMP     endS1Action
        
        
performS1ActionForPage1:        ; Name Loop
        ; Increase Name Index, resetting to 0 if needed
        INC     R5
        CMP     #4, R5
        JL      endS1Action
        MOV     #0, R5                  ; Reset R5
        JMP     endS1Action



performS1ActionForPage2:        ; Signed or Unsigned?
        ; Toggle signed boolean
        XOR     #BIT0, R6
        JMP     endS1Action

        
performS1ActionForPage3:        ; Dec --> Bin?
        ; Toggle decToBin boolean
        XOR     #BIT0, R7
        JMP     endS1Action
        
performS1ActionForPage4:        ; Digits?
        ; Toggle digits value
        XOR     #BIT0, R8
        JMP     endS1Action

        
performS1ActionForPage5:        ; Bits?
        ; Increase bits count, resetting to 0 if needed
        INC     R8
        CMP     #7, R8
        JL      endS1Action
        MOV     #0, R8                  ; Reset R8
        JMP     endS1Action


        
performS1ActionForPage6:        ; Number Choosing
        ; Check if we are in binary mode
        CMP     #0, R7
        JEQ     toggleDigitAtR10
        
        ; Check if we are in signed mode, and that the current digit is the first one
        CMP     #1, R6
        JEQ     checkIfFirstNumber
        
increaseDecimalDigit:
        ; Increase Decimal Digit
        INC     inputNumber(R10)                ; Increase digit
        CMP     #0xA, inputNumber(R10)         ; Check if it has reached 10
        JL     endS1Action
        
        MOV     #0, inputNumber(R10)           ; If so, reset it to 0

        JMP     endS1Action

checkIfFirstNumber:
        ; Check if we are on the first digit. 
        ; If we are, invert the sign
        CMP     #0, R10
        JNE     increaseDecimalDigit
        

toggleDigitAtR10:
        XOR     #1, inputNumber(R10)            ; Invert value
        JMP     endS1Action

performS1ActionForPage7:                ; Error
        ; R4 = 6
        CALL    #performS2ActionForPage7        ; Same action as S2
        JMP     endS1Action
        
performS1ActionForPage8:                ; Conversion State
        ; R4 = 9
        MOV     #9, R4                          ; This will cause the program to loop "mainLoop"

endS1Action:
        RET                             ; Return to "startProgram"

;===============================================================================

;=============================== S2 BUTTON ACTION ==============================
; Author: Jann C. Garcia, Isabella S. Garrido Blanco
; Date: October 31, 2022
; Description: Handles actions for when S2 is pressed
; Pre-Conditions: None
; Post-Conditions: None
; Side Effects: None

performActionForS2:
        // DEBUG: Turn P1.0 OFF and P9.7 ON
        BIC.b   #BIT0, &P1OUT
        BIS.b   #0x80, &P9OUT
        
        ; We need to check what page we are on!
        ; Depending on the page, we need to perform different actions:
        
        CMP     #0, R4
        JEQ     performS2ActionForPage0
        
        CMP     #1, R4
        JEQ     performS2ActionForPage1
        
        CMP     #2, R4
        JEQ     performS2ActionForPage2
        
        CMP     #3, R4
        JEQ     performS2ActionForPage3
        
        CMP     #4, R4
        JEQ     performS2ActionForPage4
        
        CMP     #5, R4
        JEQ     performS2ActionForPage5
        
        CMP     #6, R4
        JEQ     performS2ActionForPage6
        
        CMP     #7, R4
        JEQ     performS2ActionForPage7
        
        CMP     #8, R4
        JEQ     performS2ActionForPage8
        
                
performS2ActionForPage0:        ; Title       
performS2ActionForPage1:        ; Name Loop
        ; Move to Menu Page
        MOV     #2, R4
        JMP     endS2Action
        
performS2ActionForPage2:        ; Sign?
        ; Move to Dec to Bin Question
        MOV     #3, R4
        JMP     endS2Action

performS2ActionForPage3:        ; Dec --> Bin?
        ; Prematurely move to Digits Page
        MOV     #4, R4
        
        ; If Dec --> Bin is true, we need to check if digit 0 needs to be skipped
        CMP     #1, R7
        JEQ     configureDecimalInput
        
        ; Binary was chosen, don't skip digit 0, and move to Bits Page
        ; (by increasing R4 by 1)
        INC.b   R4
        JMP     endS2Action

configureDecimalInput:

        CMP     #1, R6          ; Check if signed is true.
        JEQ     endS2Action     ; Do nothing if it's signed

        INCD    R10             ; Increase index because number is not signed
        JMP     endS2Action
        
performS2ActionForPage4:        ; Digs?
performS2ActionForPage5:        ; Bits?

        ; Move to Number Input Screen
        MOV     #6, R4
        JMP     endS2Action
        
performS2ActionForPage6:        ; Number Input Screen
        
        ; Confirm Number. 
        INCD     R10             ; Increase Index (12 because the array is of WORDS)
        CMP     #12, R10         ; Check if we are still within index range
        JL      endS2Action
        
        
        ; If we reached the final digit, move to Conversion

        ; TODO: read the Binary input
        CALL    #readUserInput
        MOV     #8, R4
        CMP     #0x40, R12
        JGE     redirectToErrorPage
        JMP     endS2Action

redirectToErrorPage:
        MOV     #7, R4
        ; Check if input is signed or unsigned to allow user to input
        ; their value again starting at the correct index in the display.
        CMP     #0, R6  ; Check if input is signed
        JEQ     setCorrectIndex ; Input is not signed, begin at index 2
        MOV     #0, R10
        JMP     endS2Action

setCorrectIndex:
        MOV     #2, R10
        JMP     endS2Action
        
performS2ActionForPage7:        ; Error
        ; Return back to input screen
        MOV     #6, R4
        JMP     endS2Action
        
performS2ActionForPage8:        ; Conversion
        ; Move to Reset State
        MOV     #9, R4          ; This will cause the program to loop "mainLoop"
        
endS2Action:
        RET                                     
        

;=============================== S2 BUTTON ACTION END===========================

;=========================== READ USER INPUT ================================
; Author: Jann C. Garcia, Isabella S. Garrido Blanco
; Date: November 4, 2022
; Description: Read the user input and store the value in Registers 11 and 12
;       For Decimal:  Register 11 contains the fractional part of input
;                     Register 12 contains the whole number part of input
; Pre-Conditions: None
; Post-Conditions: R11 will contain the value of the fractional portion
; of the number the user has entered. R12 will contain the value of the whole 
; part the use rhas entered.
; Side Effects: None


readUserInput:
        CMP     #1, R7 ; Check if user has entered a decimal number
        JEQ     checkWholeDigitAmount ; User has entered a decimal number
        ;TODO: call read binary

; The wholeNumDecimal array will take into consideration the place value of
; each number for the two possible cases we have when a user inputs a 
; decimal number.These are the numbers the user input will be multiplied by.
; Case 1: Sii.ddd 
;               wholeNumDecimal = [0, 10, 1, 100, 10, 1]
; Case 2: Si.dddd
;               wholeNumDecimal = [0, 1, 1000, 100, 10, 1]
;
; For example: inputNumber = [0, 2, 3, 4, 5, 6], 1 whole digit
; Then: [0*0, 2*1, 3*1000, 4*100, 5*10, 6*1]

checkWholeDigitAmount:
        CMP     #1, R8
        JEQ     modifyMultiplicationArray ; User picked two whole digits
        PUSH.B  R13
        MOV     #0, R13
        MOV     #0, wholeNumDecimal(R13)
        INCD    R13
        MOV     #1, wholeNumDecimal(R13)
        INCD    R13
        MOV     #1000, wholeNumDecimal(R13)
        INCD    R13
        MOV     #100, wholeNumDecimal(R13)
        INCD    R13
        MOV     #10, wholeNumDecimal(R13)
        INCD    R13
        MOV     #1, wholeNumDecimal(R13)
        POP.B   R13
        JMP     readDecimalInput

; Modify the multiplication array for 2 whole digits
modifyMultiplicationArray:
        PUSH.B  R13
        MOV     #0, R13
        MOV     #0, wholeNumDecimal(R13)
        INCD    R13
        MOV     #10, wholeNumDecimal(R13)
        INCD    R13
        MOV     #1, wholeNumDecimal(R13)
        INCD    R13
        MOV     #100, wholeNumDecimal(R13)
        INCD    R13
        MOV     #10, wholeNumDecimal(R13)
        INCD    R13
        MOV     #1, wholeNumDecimal(R13)
        INCD    R13
        POP.B   R13
        
readDecimalInput:
        CALL    #readWholeNumbers
        MOV     R11, R12 ; store the Whole Number Portion of input in R11
        ; Reset R11 to prepare for storing the fractional portion of input
        MOV     #0, R11 
        CALL    #readFractionalNumbers
        RET

readWholeNumbers:
        ; R8 holds how many whole digits the user has picked
        ; If R8 holds a 0, user has picked 1 whole digit
        ; If R8 holds a 1, user has picked 2 whole digits
        PUSH.B  R8 
        INC     R8 
        PUSH.B  R4
        ; R4 will now hold the index we would like to access in each array.
        ; Start counting at index 2 of both the user input array and the 
        ; wholeNumDecimal array. 
        ; These indexes hold the two numbers that will be multiplied.
        MOV     #2, R4 
        JMP     readLoop

readFractionalNumbers:
        PUSH.B  R8 
        PUSH.B  R4 
        PUSH.B  R7  
        ; R8 contains how many whole digits the user has picked
        ; 5 - wholeDigits will give us how many fractional digits
        ; we will need to read.
        INC     R8 ; since 0 = 1 whole digit, and 1 = 2 whole digits   
        MOV     R8, R7
        MOV     #5, R8
        ; 5 - wholeDigits will give us how many fractional digits
        ; we will need to read.
        SUB     R7, R8
        MOV     R7, R4
        POP.B   R7
        ; Two Cases: 3 or 4 fractional digits
        ; If we need to read 3 fractional digits, set the index to the third
        ; character placement on the LCD display. Else, we set it to the second
        ; placement.
        CMP     #3, R8
        JEQ     setIndexTo6
        MOV     #4, R4
        JMP     readLoop
        
setIndexTo6:
        MOV     #6, R4
        JMP     readLoop
        
; moveRight will help move us to the number in the next index of the array.
moveRight:
        INCD R4
        DEC R8
        
readLoop: 
        ; If we have read all the fractional digits, endAction
        cmp #0, R8
        JEQ endAction
        ; If the user input is 0, skip the multiplication process
        cmp #0, inputNumber(R4)
        JEQ  moveRight
        add wholeNumDecimal(R4), R11 ; Else, add the larger number.

        ; The user input, n, will tell us how many times to add the larger
        ; number. After adding the larger number, decrease the number (n-1) 
        ; the user entered, so as to only add the larger number 
        ; n-1 more times.
        dec inputNumber(R4)
        cmp #0, inputNumber(R4)
        JEQ  moveRight
        JMP readLoop

endAction:
        ; Cleanup temporary registers
        POP.B R4
        POP.B R8
        RET

;=========================== DISPLAY SUBROUTINE ================================
; Author: Jann C. Garcia, Isabella S. Garrido Blanco
; Date: October 31, 2022
; Description: Displays the Current Page
; Pre-Conditions: R4 must be below 9
; Post-Conditions: None
; Side Effects: None


displayCurrentPage:
        CMP     #0, R4                  
        JEQ     displayTitleScreen      ; Maybe we need to use CALL instead of JMP.
                                        ; Same goes for below.
        
        CMP     #1, R4
        JEQ     displayNames
        
        CMP     #2, R4
        JEQ     displaySignedQuestion
        
        CMP     #3, R4
        JEQ     displayDecToBinQuestion
        
        CMP     #4, R4
        JEQ     displayDigitsQuestion
        
        CMP     #5, R4
        JEQ     displayBitsQuestion
        
        CMP     #6, R4
        JEQ     displayNumberInput
        
        CMP     #7, R4
        JEQ     displayError
        
        CMP     #8, R4
        JEQ     displayConversion        

        
        RET


displayTitleScreen:

        MOV.b   #0x8E, &0xA29           ; F
        MOV.b   #0x22, &0xA26           ; (
        MOV.b   #0xCF, &0xA23           ; P
        MOV.b   #0x01, &0xA24           ; .
        MOV.b   #0xFC, &0xA32           ; Q
        MOV.b   #0x02, &0xA33           ; Q (line)
        MOV.b   #0x88, &0xA2F           ; )
        
        RET                             ; Return back to "startProgram"


displayNames:
  
        PUSH.b  R12                     ; Store previous R12 value
        MOV.B   names0(R5), R12         ; Get index for digit 0 for the current name
        
        MOV.B   CharH(R12), &0xA29
        MOV.B   CharL(R12), &0xA2A         
        
        MOV.B   names1(R5), R12         ; Get index for digit 1 for the current name
        
        MOV.B   CharH(R12), &0xA25
        MOV.B   CharL(R12), &0xA26  
        
        MOV.B     names2(R5), R12       ; Get index for digit 2 for the current name
        
        MOV.B   CharH(R12), &0xA23
        MOV.B   CharL(R12), &0xA24  
        
        MOV.B     names3(R5), R12       ; Get index for digit 3 for the current name
        
        MOV.B   CharH(R12), &0xA32
        MOV.B   CharL(R12), &0xA33  
        
        MOV.B     names4(R5), R12       ; Get index for digit 4 for the current name
        
        MOV.B   CharH(R12), &0xA2E
        MOV.B   CharL(R12), &0xA2F  
        
        MOV.B     names5(R5), R12       ; Get index for digit 5 for the current name
        
        MOV.B   CharH(R12), &0xA27
        MOV.B   CharL(R12), &0xA28  
       
        POP     R12                     ; Restore the original value
        RET

        
displaySignedQuestion:
        MOV.B   #0xB1, &0xA29           ;S high byte
        MOV.B   #0x80, &0xA2A           ;S low byte
        MOV.B   #0x90, &0xA25           ;I high byte
        MOV.B   #0x50, &0xA26           ;I low byte
        MOV.B   #0xBD, &0xA23           ;G high byte
        MOV.B   #0x00, &0xA24           ;G low byte
        MOV.B   #0x6c, &0xA32           ;N high byte
        MOV.B   #0x82, &0xA33           ;N low byte
        MOV.B   #0xC5, &0xA2E           ;Question Mark high byte
        MOV.B   #0x10, &0xA2F           ;Question Mark low byte

        MOV.B   yesNoH(R6), &0xA27           ;Y/N high bit
        MOV.B   yesNoL(R6), &0xA28           ;Y/N low bit

        RET
        
displayDecToBinQuestion:

        MOV.B   #0xF0, &0xA29           ;D high byte
        MOV.B   #0x50, &0xA2A           ;D low byte
        MOV.B   #0x03, &0xA25           ;Arrow line high byte
        MOV.B   #0x00 , &0xA26          ;Arrow line low byte
        MOV.B   #0x00, &0xA23           ;Arrow head high byte
        MOV.B   #10001000B, &0xA24      ;Arrow head low byte
        MOV.B   #0xF1, &0xA32           ;B high byte
        MOV.B   #0x50, &0xA33           ;B low byte
        MOV.B   #0xC5, &0xA2E           ;Question Mark high byte
        MOV.B   #0x10, &0xA2F           ;Question Mark low byte

        MOV.B   yesNoH(R7), &0xA27           ;Y/N high bit
        MOV.B   yesNoL(R7), &0xA28           ;Y/N low bit

        RET
        
displayDigitsQuestion:
        MOV.B   #0xF0, &0xA29           ;D high byte
        MOV.B   #0x50, &0xA2A           ;D low byte
        MOV.B   #0xBD, &0xA25           ;G high byte
        MOV.B   #0x00, &0xA26           ;G low byte
        MOV.B   #0x80, &0xA23           ;T high byte
        MOV.B   #0x50, &0xA24           ;T low byte
        MOV.B   #0xB1, &0xA32           ;S high byte
        MOV.B   #0x80, &0xA33           ;S low byte
        MOV.B   #0xC5, &0xA2E           ;Question Mark high byte
        MOV.B   #0x10, &0xA2F           ;Question Mark low byte

        ; Hacky workaround to increasing index by 1 :V
        PUSH.b  R8
        INC    R8

        MOV.B   digitH(R8), &0xA27           ;Digit high bit
        MOV.B   digitL(R8), &0xA28           ;Digit low bit

        POP.b     R8


        RET
        
displayBitsQuestion:
        MOV.B   #0xF1, &0xA29           ;B high byte
        MOV.B   #0x50, &0xA2A           ;B low byte
        MOV.B   #0x90, &0xA25           ;I high byte
        MOV.B   #0x50, &0xA26           ;I low byte
        MOV.B   #0x80, &0xA23           ;T high byte
        MOV.B   #0x50, &0xA24           ;T low byte
        MOV.B   #0xB1, &0xA32           ;S high byte
        MOV.B   #0x80, &0xA33           ;S low byte
        MOV.B   #0xC5, &0xA2E           ;Question Mark high byte
        MOV.B   #0x10, &0xA2F           ;Question Mark low byte
        
        MOV.B   digitH(R8), &0xA27           ;Digit high bit
        MOV.B   digitL(R8), &0xA28           ;Digit low bit


        RET
        
displayNumberInput:
        PUSH.w  R11                     ; digit Index
        PUSH.w  R12                     ; Input Number Index
        MOV     #0, R11
        MOV     #0, R12
        
        ; Check if the number is signed, AND it's decimal mode
        
        ; Check if number is decimal input
        CMP     #1, R7
        JEQ     decimalConfiguration
        
        ; Digit 0
        MOV     inputNumber(R12), R11
        MOV.B   digitH(R11),  &0xA29
        MOV.B   #0x0 , &0xA2A 
        
        JMP     displayOtherDigits
        
displayNothingForDigit0:
        ; BUG: Displaying a funny
        MOV.B   #0x0,  &0xA29           
        MOV.B   #0x0,  &0xA2A 
        JMP     displayOtherDigits
        
decimalConfiguration: 
displaySignedNumber:
        ; Check if the number is signed
        CMP     #1, R6
        JNE     displayNothingForDigit0      ; Skip digit 0 if not signed
        MOV     inputNumber(R12), R11
        MOV.B   posOrNegH(R11),  &0xA29
        MOV.B   posOrNegL(R11) , &0xA2A 
        
        
displayOtherDigits:
        
        ; Digit 1
        INCD    R12
        MOV     inputNumber(R12), R11
        MOV.B   digitH(R11),  &0xA25 
        BIC     #11111110B, &0xA26


        ; Digit 2
        INCD    R12
        MOV     inputNumber(R12), R11
        MOV.B   digitH(R11),  &0xA23   
        BIC     #11111110B, &0xA24

        
        ; Digit 3
        INCD    R12
        MOV     inputNumber(R12), R11     
        MOV.B   digitH(R11),  &0xA32           
        MOV.B   #0x0, &0xA33
        
        ; Digit 4
        INCD    R12
        MOV     inputNumber(R12), R11
        MOV.B   digitH(R11),  &0xA2E           
        MOV.B   #0x0, &0xA2F
        
        ; Digit 5
        INCD     R12
        MOV     inputNumber(R12), R11
        MOV.B   digitH(R11),  &0xA27           
        MOV.B   #0x0, &0xA28  
        
        ; Render the dot, if needed
        ; First check if we are in decimal mode
        CMP     #1, R7
        JNE     endDigitsDisplay
        
        ; Render the period at index R8
        CMP     #0, R8
        JEQ     displayPointAtAddress26
        MOV.B     #0x1, &0xA24
        MOV.B     #0x0, &0xA26
        JMP     endDigitsDisplay
        
displayPointAtAddress26
        MOV.B     #0x1, &0xA26       ; Set a point to the decimal location
        MOV.B     #0x0, &0xA24


endDigitsDisplay:
        POP     R11
        POP     R12
        RET
        
displayError:
        MOV.B   #0x9F, &0xA29           ;E high byte
        MOV.B   #0x00 , &0xA2A          ;E low byte
        MOV.B   #0xCF, &0xA25           ;R high byte
        MOV.B   #0x02, &0xA26           ;R low byte
        MOV.B   #0xCF, &0xA23           ;R high byte
        MOV.B   #0x02, &0xA24           ;R low byte
        MOV.B   #0xFC, &0xA32           ;O high byte
        MOV.B   #0x00, &0xA33           ;O low byte
        MOV.B   #0xCF, &0xA2E           ;R high byte
        MOV.B   #0x02, &0xA2F           ;R low byte
        MOV.B   #0x00, &0xA27           ;Empty
        MOV.B   #0x00, &0xA28           ;Empty
        RET
        
displayConversion:
          RET

;===============================================================================


;=========================== DELAY SUBROUTINE ==================================
; Author: Jann C. Garcia
; Date: October 31, 2022
; Description: Delays the program
; Pre-Conditions: None
; Post-Conditions: None
; Side Effects: None


delay:  ; Used to delay the program
        ; giving the MSP time to handle
        ; button pressed (debouncing)

        PUSH.w    R7                            ; Preserve Original Value                       
        CALL    #delayStart
        POP     R7                              ; Restore Original Value
        RET
        
delayStart:
        MOV     #0xFFFF,R7                      ; Set R7 to an abnormally high value       


next:   ; Decrease R7 all the way to 0
        DEC     R7                       
        JNZ     next
        RET
;===============================================================================



endProgram:
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)

        NOP
        END
